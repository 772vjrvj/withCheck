package com.hk.toCheckFinal;import java.io.File;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Map;import javax.servlet.ServletContext;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.SessionAttributes;import org.springframework.web.bind.support.SessionStatus;import org.springframework.web.context.ServletContextAware;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.servlet.ModelAndView;import com.hk.toCheckFinal.dtos.HcAnsDto;import com.hk.toCheckFinal.dtos.HcCriteria;import com.hk.toCheckFinal.dtos.HcDto;import com.hk.toCheckFinal.dtos.HcInChkDto;import com.hk.toCheckFinal.dtos.HcLoginDto;import com.hk.toCheckFinal.dtos.HcPageMaker;import com.hk.toCheckFinal.service.IHcService;import com.hk.toCheckFinal.utils.Util;/** * Handles requests for the application home page. *///V@SessionAttributes({"loginId", "loginRole"})@Controllerpublic class HomeController implements ServletContextAware {   	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);	private static final Object Undefined = null;	//V	@Autowired 	private IHcService hcService;		//V	SimpleDateFormat SimpleDateFormat = new SimpleDateFormat("yyyyMMdd");	Date currentTime = new Date ();	String today = SimpleDateFormat.format(currentTime);	int today1 = Integer.parseInt(today);		private ServletContext servletContext;		Calendar cal = Calendar.getInstance();			@Override	public void setServletContext(ServletContext servletContext) {		this.servletContext=servletContext;	}            		//V�쉶�썝媛��엯	@RequestMapping(value = "/regist.do", method = RequestMethod.GET)	public String regist(Locale locale) {		logger.info("�쉶�썝媛��엯 {}.", locale);		return "regist";	}  			//V以묐났泥댄겕	@RequestMapping(value = "/idchk.do", method = RequestMethod.GET)	public String idchk(String id, Locale locale, Model model) {		logger.info("以묐났泥댄겕 {}.", locale);		String isS="n";		String nycontent ="�궗�슜�븷 �닔 �뾾�뒗 �븘�씠�뵒 �엯�땲�떎.";		if(hcService.idChk(id)==null){			isS="y";			nycontent="�궗�슜�븷 �닔 �엳�뒗 �븘�씠�뵒 �엯�땲�떎.";		}      		Map<String, String> map = new HashMap<String, String>();		map.put("isS", isS);   		map.put("id", id);		map.put("nycontent", nycontent);		model.addAttribute("map", map);		return "idchk";	}     		//V�쉶�썝媛��엯 �썑	@RequestMapping(value = "/regist_after.do", method = RequestMethod.POST)	public String getAllBoard(HcLoginDto dto, Locale locale, Model model) {		logger.info("�쉶�썝媛��엯 �썑{}.", locale);      		boolean isS=hcService.insertUser(dto);      		if(isS) {			model.addAttribute("id", dto.getId());               			return "welcome";		}else {			model.addAttribute("msg","�쉶�썝媛��엯�뿉 �떎�뙣 �뻽�뒿�땲�떎.!");			return "error";		}	}		//V�븘�씠�뵒 李얘린	@RequestMapping(value = "/findId.do", method = RequestMethod.GET)	public String findId(Locale locale) {		logger.info("�븘�씠�뵒李얘린 {}.", locale);		return "findId";	}  		//V�븘�씠�뵒 李얘린after    @RequestMapping(value = "/findId_after.do", method = RequestMethod.POST)    public String findId(String name, String phone,Locale locale,Model model) {       logger.info("�븘�씠�뵒 李얘린 after {}.", locale);       HcLoginDto dto=hcService.findId(name, phone);       System.out.println(dto);       if(dto==null) {    	   System.out.println("�븘�씠�뵒 李얘린 �떎�뙣");           model.addAttribute("msg","�씠由꾧낵 踰덊샇媛� �씪移섑븯吏� �븡�뒿�땲�떎.");           return "error";          }else {          model.addAttribute("dto",dto);       return "findIdAfter";       }    }    		//V鍮꾨�踰덊샇李얘린    //V蹂몄씤�솗�씤 �솕硫� �씠�룞    @RequestMapping(value = "/findPw_identi.do", method = RequestMethod.GET)    public String findPw(Locale locale) {          logger.info("蹂몄씤�솗�씤 {}.", locale);          return "findPwIdenti";	}        //V鍮꾨�踰덊샇 李얘린 �쟾 蹂몄씤�솗�씤 諛� �븘�씠�뵒媛� �씪移섑븯�뒗 吏덈Ц 異쒕젰 �떟蹂� �엯�젰    @RequestMapping(value = "/findPw.do", method = RequestMethod.POST)    public String findPw(String id, String phone,Locale locale,Model model) {       logger.info("鍮꾨�踰덊샇 李얘린 吏덈Ц {}.", locale);              //�븘�씠�뵒, 踰덊샇 �씪移� 寃��궗       if(hcService.findPw(id, phone)==null) {          System.out.println("鍮꾨�踰덊샇李얘린 蹂몄씤�씤利� �떎�뙣");          model.addAttribute("msg","�븘�씠�뵒�� 踰덊샇瑜� �떎�떆 �솗�씤�빐二쇱꽭�슂.");          return "error";       }else {          HcLoginDto dto = hcService.findPw(id, phone);          //�븘�씠�뵒�뿉 留욌뒗 吏덈Ц 異쒕젰          System.out.println("dto.getId():"+dto.getId());          HcLoginDto dto_find=hcService.findPw_find(dto.getId());          System.out.println("dto_find"+dto_find);          model.addAttribute("dto_find",dto_find.getQuestion());          return "findPw";       }    }        //V�엯�젰�븳 �떟蹂��씠 吏덈Ц怨� �씪移� �븯�뒗吏� 寃��궗�븯怨� �씪移섑븯硫� 鍮꾨�踰덊샇 異쒕젰    @RequestMapping(value = "/findPw_After.do", method = RequestMethod.POST)    public String findPw_After(HttpServletRequest httpServletRequest,Locale locale,Model model) {       logger.info("鍮꾨�踰덊샇 李얘린 {}.", locale);       String question = httpServletRequest.getParameter("question");       String answer = httpServletRequest.getParameter("answer");       System.out.println("question:"+question);       System.out.println("answer:"+answer);       //�떟蹂� �씪移� 寃��궗       if(hcService.findPw_After(question,answer)==null) {          System.out.println("�떟蹂� 遺덉씪移�");          model.addAttribute("msg","�떟蹂��쓣 �솗�씤�빐二쇱꽭�슂");          return "error";       }else {          HcLoginDto dto = hcService.findPw_After(question,answer);          model.addAttribute("dto",dto);          return "findPwAfter";       }    }    	//V濡쒓렇�씤	@RequestMapping(value = "/login_after.do", method = RequestMethod.POST)	public String login_after(HcLoginDto dto, Locale locale, Model model)  {		logger.info("濡쒓렇�씤 吏꾪뻾以� {}.", locale);		System.out.println(dto);		HcLoginDto HcLoginDto= hcService.getLogin(dto.getId(), dto.getPassword());      		if(HcLoginDto!=null){			if(HcLoginDto.getEnabled().equals("Y")){				model.addAttribute("loginId", HcLoginDto.getId());				model.addAttribute("loginRole", HcLoginDto.getRole());				return "redirect:main.do?id="+dto.getId()+"&role="+HcLoginDto.getRole();			}else{				model.addAttribute("msg","�븘�씠�뵒�� �뙣�뒪�썙�뱶瑜� �솗�씤�븯�꽭�슂!�깉�눜�븳 怨꾩젙");				return "error";			}               		}else{			model.addAttribute("msg","�엯�젰�븳 �궗�슜�옄 �씠由꾩쓣 �궗�슜�븯�뒗 怨꾩젙�쓣 李얠쓣 �닔 �뾾�뒿�땲�떎. �궗�슜�옄 �씠由꾩쓣 �솗�씤�븯怨� �떎�떆 �떆�룄�븯�꽭�슂.");			return "error";		}	}     		//V濡쒓렇�븘�썐   	@RequestMapping(value = "/logout.do", method = RequestMethod.GET)	public String point(Locale locale, Model model, SessionStatus session) {		logger.info("濡쒓렇�븘�썐 {}.", locale);		model.addAttribute("loginId", "0");		model.addAttribute("loginRole", "0");		return "logout";	}  		//V�쑀�� 硫붿씤�럹�씠吏�	@RequestMapping(value = "/main.do", method = RequestMethod.GET)	public ModelAndView main(String id, String role, Locale locale,SessionStatus session) {		logger.info("main.do {}.", locale);   		ModelAndView view = new ModelAndView();		HcLoginDto HcLoginDto= hcService.getUser(id);        				//�슫�쁺�옄 �럹�씠吏�濡�		if(role.toUpperCase().equals("ADMIN")) {			view.setViewName("home");            view.addObject("id",id);            return view;                    //�쑀���럹�씠吏�		}else {            			List<HcDto> list=hcService.getAllListEvery();			for (int k = 0; k < list.size(); k++) {				if(list.get(k).getWithh().equals("Y")) {					if((double)hcService.habitCalIntoPerCount(list.get(k).getpKey())/list.get(k).getRecruit()<0.501							&&Integer.parseInt(list.get(k).getStDate()) <= today1) {						boolean isS  = hcService.habitCalDeleteAll(list.get(k).getpKey());						boolean isS1  = hcService.deleteHcInChkAll(list.get(k).getpKey()); 					}else {											}				}								//醫낅즺 �씪�씠 �삤�뒛�궇吏쒕낫�떎 �옉�떎�뒗 嫄� 吏��궃 寃껋씠�씪�뒗 �씠�빞湲�// 紐⑤뱺 �쑀���뱾�쓽 由ъ뒪�듃 以묒뿉 湲곌컙�씠 吏��궃寃껋쓣 醫낅즺 �떆耳쒖쨲				if(Integer.parseInt(list.get(k).getEdDate()) < today1) {					list.get(k).setEndList("Y");					boolean isS=hcService.updateEndList(list.get(k));            		if(isS==true) {            			System.out.println("endList蹂�寃� �꽦怨�");            		}else {            			System.out.println("endList蹂�寃� �떎�뙣");            		}            	}else {            		            	}            }			//濡쒓렇�씤 �븘�씠�뵒�쓽 由ъ뒪�듃 媛����삤湲�			List<HcDto> list1=hcService.getAllList(id);            view.setViewName("usermain");            view.addObject("list1",list1);            view.addObject("HcLoginDto",HcLoginDto);            return view;                     }	} 			//V�뒿愿� 留뚮뱾湲�	@RequestMapping(value = "/habitCalForm.do", method = RequestMethod.GET)	public ModelAndView habitCalForm(String id, Locale locale) {		logger.info("�뒿愿� 留뚮뱾湲� {}.", locale);      		HcLoginDto HcLoginDto= hcService.getUser(id);      		ModelAndView view = new ModelAndView();      		Map<String, Integer> map = new HashMap<String, Integer>();		Calendar cal=Calendar.getInstance();		int year=cal.get(Calendar.YEAR);		int month=cal.get(Calendar.MONTH)+1;		int date=cal.get(Calendar.DATE);		int lastDay=cal.getActualMaximum(Calendar.DAY_OF_MONTH);		map.put("year", year);   		map.put("month", month);		map.put("date", date);		map.put("lastDay", lastDay);      		view.setViewName("habitCalForm");		view.addObject("map",map);		view.addObject("HcLoginDto",HcLoginDto);		return view;      	}    	//V�뙘�뾽李� �쓣�슦湲�	@RequestMapping(value = "/popup.do", method = RequestMethod.GET)	public String popup(Locale locale) {	   logger.info("�뙘�뾽李� �쓣�슦湲� {}", locale);	   	   return "popup";	}      	       //V�뒿愿�媛��닔 泥댄겕    @ResponseBody    @RequestMapping(value = "/ajaxCheck.do", method = RequestMethod.GET)    public Map<String, Integer> ajaxCheck(String id, Locale locale, Model model){       	List<HcDto> list1=hcService.getAllList(id);    	Map<String, Integer> map = new HashMap<String, Integer>();    	map.put("count", list1.size());       	return map;    	      }			//VStart(留뚮뱾湲�) habitCalrForm.jsp �뿉�꽌 �엯�젰�븳 媛믩뱾�씠 �꽆�뼱 �삩�떎.       	@RequestMapping(value = "/habitCalInsert.do", method = RequestMethod.POST)	public String habitCalInsert(String year, String month, String date, HcDto HcDto, Locale locale, Model model) {    	  System.out.println("HcDto ::::::"+ HcDto);		logger.info("habitCalInsert {}.", locale);      		//�떆�옉�씪(stDate) yymmdd留뚮뱾怨� setter�뿉 �꽔湲�		String stDate = year+Util.isTwo(month)+Util.isTwo(date);		HcDto.setStDate(stDate);    	  		//醫낅즺�씪(edDate) yymmdd�꽕�젙  setter�뿉 �꽔湲�		String edDate = Util.edDate(year,month,date,HcDto.getTerm());		HcDto.setEdDate(edDate);    	  		//pKey留뚮뱾怨�  setter�뿉 �꽔湲�		String pKey = Util.getPKey(HcDto.getId());		HcDto.setpKey(pKey);    	  		//�븿猿섑븯湲�(withh) & 怨듦컻�븯湲�(calWith) �꽭�똿		if(HcDto.getRecruit()==1) {			HcDto.setWithh("N");			HcDto.setCalWith("N");		}else {			HcDto.setWithh("Y");			HcDto.setCalWith("Y");		}        		//�늻媛� 二쇱씤�씤吏� 泥댄겕host		HcDto.setHost(HcDto.getId());		 		//吏꾪뻾以몆rogress �꽭�똿 �삤�뒛�궇吏쒖� �떆�옉�씪�씠 媛숈�吏� �뿬遺� �솗�씤		if(today.equals(stDate)) {			HcDto.setProgress("Y");		}else {			HcDto.setProgress("N");  		}          		//habitCalInsert�뿉 紐⑤뱺 媛� �엯�젰		boolean isS = hcService.habitCalInsert(HcDto);         		if(isS) {        	  			if(HcDto.getWithh().equals("N")) {	        	  			}else {				//�븿猿� �븯湲곗씪 寃쎌슦 洹� 湲곌컙留뚰겮 �씤利앺럹�씠吏�insertHcInChk媛� �븘�슂 �븯�떎 				int term = Integer.parseInt(HcDto.getTerm());				for (int i = 0; i < term; i++) {					int year1 = Integer.parseInt(year);					int month1 = Integer.parseInt(month);					int day1 = Integer.parseInt(date);        			 					Calendar cal = Calendar.getInstance();					cal.set(year1, month1-1, day1);					cal.add(Calendar.DATE, i);        			 					String inChkDate =SimpleDateFormat.format(cal.getTime());        			 					boolean isS1 = hcService.insertHcInChk(new HcInChkDto(pKey, HcDto.getId(),HcDto.getTitle(), inChkDate));        			 					if(isS1) {        				 					}else {						model.addAttribute("msg"," insertHcInChk �떎�뙣 �뻽�뒿�땲�떎.!");						return "error";					}				}	        	  			}			return "redirect:habitCalDetail.do?id="+HcDto.getId()+"&pKey="+HcDto.getpKey()+"&withh="+HcDto.getWithh();	          		}else {			model.addAttribute("msg"," habitCalInsert �떎�뙣 �뻽�뒿�땲�떎.!");			return "error";		}         	}              	//VAlone or With Detail�럹�씠吏�濡� 媛�湲곗쐞�빐 �뱾由щ뒗 怨�	@RequestMapping(value = "/habitCalDetail.do", method = RequestMethod.GET)	public String habitCalDetail(String id, String pKey,String withh, Locale locale) throws ParseException {		logger.info("habitCalDetail {}.", locale);				List<HcDto> list1=hcService.getAllList(id);				for (int i = 0; i < list1.size(); i++) {			if(list1.get(i).getpKey().equals(pKey)) {				boolean isS1=hcService.updateSort("1", list1.get(i).getpKey());				if(isS1==true) {					System.out.println("updateSort蹂�寃� �꽦怨�");				}else {					System.out.println("updateSort蹂�寃� �떎�뙣");				}			}else {				boolean isS2=hcService.updateSort("0", list1.get(i).getpKey());				if(isS2==true) {					System.out.println("updateSort蹂�寃� �꽦怨�");				}else {					System.out.println("updateSort蹂�寃� �떎�뙣");				}			}		}				if(withh.equals("N")) {			return "redirect:habitCalAloneDetail.do?id="+id+"&pKey="+pKey;		}else {			return "redirect:habitCalWithDetail.do?id="+id+"&pKey="+pKey;		}	} 		    //V�긽�꽭蹂닿린    //V紐⑤뱺 �쉶�썝�뱾�쓽 '�샎�옄' �븯湲� 由ъ뒪�듃 �긽�꽭蹂닿린 濡쒓렇�씤 �궗�슜�옄 蹂닿린 �닔�젙媛��뒫	@RequestMapping(value = "/habitCalAloneDetail.do", method = RequestMethod.GET)	public ModelAndView habitCalAloneDetail(String id, String pKey, Locale locale) throws ParseException {		logger.info("habitCalAloneDetail {}.", locale);		ModelAndView view = new ModelAndView();				HcDto dto = hcService.getHabitCalListOne(pKey,id);        		Map<String, Integer> map =Util.DetailYYMMDD(dto);        		List<String> chkList=hcService.habitCalTakeChk(pKey);		        view.addObject("chkList",chkList);        view.addObject("dto",dto);           view.addObject("map",map);        view.addObject("id",id);         view.setViewName("habitCalAloneDetail");        	         return view;          	}    				//V紐⑤뱺 �쉶�썝�뱾�쓽 '�븿猿�' �븯湲� 由ъ뒪�듃 �긽�꽭蹂닿린 濡쒓렇�씤 �궗�슜�옄 蹂닿린 �닔�젙遺덇�	@RequestMapping(value = "/habitCalWithDetail.do", method = RequestMethod.GET)	public ModelAndView habitCalWithDetail(String id, String pKey, Locale locale) throws ParseException {		logger.info("habitCalWithDetail {}.", locale);		ModelAndView view = new ModelAndView();				HcDto dto = hcService.getHabitCalListOne(pKey,id);        		long diffdays=Util.doDiffOfDate(dto.getStDate());		//�떆�옉�씪 =< �삤�뒛�궇吏�  =< 醫낅즺�씪 && �븿猿섑븯湲� �긽�깭�씤 寃쎌슦		int stDate=Integer.parseInt(dto.getStDate());		int edDate=Integer.parseInt(dto.getEdDate());				if(today1>=stDate&&today1<=edDate) {        	  				Map<String, Integer> map= Util.TodayYYMMDD();				//�씤利앺븯湲� �빐�떦 �궇吏쒖뿉 �빐�떦 紐⑸줉				List<HcInChkDto> list = hcService.getHcInChk(new HcInChkDto(pKey, today1+""));				view.addObject("list",list);				view.addObject("diffdays",diffdays+1);								view.addObject("map",map);				view.addObject("dto",dto);				view.setViewName("photoInChk");			return view;					}else{    		Map<String, Integer> map =Util.DetailYYMMDD(dto);    		List<HcDto> list = hcService.getHabitCalList(pKey);    		int intoPer=hcService.habitCalIntoPerCount(pKey);    		List<String> chkList=hcService.habitCalTakeChk(pKey);			if(today1<stDate) {				view.addObject("diffdays",-diffdays);			}else {						view.addObject("diffdays",dto.getTerm());			}            view.addObject("dto",dto);               view.addObject("map",map);            view.addObject("intoPer",intoPer);            view.addObject("chkList",chkList);            view.addObject("list",list);//李멸��옄�뱾                        view.setViewName("habitCalWithDetail");            	             return view;        		}        	}			//V�샎�옄 �븯湲� 怨듦컻 鍮꾧났媛� & 泥댄겕媛� �엯�젰	@RequestMapping(value = "/insertCheck.do", method = RequestMethod.POST)	public String insertCheck(String pKey, String id, String[] chk, String switchCheck, Locale locale, Model model) {		logger.info("insertCheck {}.", locale);				HcLoginDto HcLoginDto= hcService.getUser(id);		//�삤�뒛 �궇吏� 媛믩쭔 �꽆�뼱�삩�떎. �굹癒몄��뒗 disabled�뤌�엳�뼱�꽌 �븞�꽆�뼱�샂		if(chk==null){			boolean isS1=hcService.habitCalChkDelete(pKey,today);			if(isS1==true) {				System.out.println("habitCalChkDelete媛믪궘�젣 �꽦怨�");				//泥댄겕 �궘�젣 �썑 �쁽�옱 泥댄겕 媛��닔 �꽭湲�				int chkCount =hcService.habitCalChkCount(pKey);				//媛��닔 �꽭怨� 洹� 媛믪쑝濡� �뾽�뜲�씠�듃 �떆�궎湲�				boolean isS2=hcService.updateChkCount(new HcDto(pKey,chkCount));								if(isS2==true) {					System.out.println("updateChkCount媛믪궘�젣 �꽦怨�");				}else {					System.out.println("updateChkCount媛믪궘�젣 �꽦怨�");				}							}else {				System.out.println("habitCalChkDelete媛� �씠誘� �궘�젣 �맖");			}		}else {			if(chk[chk.length-1].equals(today)) {				boolean isS=hcService.habitCalInsertChk(pKey,today);				if(isS==true) {					System.out.println("habitCalInsertChk媛믪엯�젰 �꽦怨�");					int chkCount =hcService.habitCalChkCount(pKey);										boolean isS1=hcService.updateChkCount(new HcDto(pKey,chkCount));										if(isS1==true) {						System.out.println("updateChkCount媛믪엯�젰 �꽦怨�");					}else {						System.out.println("updateChkCount媛믪엯�젰 �꽦怨�");					}									}else {					System.out.println("habitCalInsertChk媛믪엯�젰 �떎�뙣");				}			}else {				boolean isS1=hcService.habitCalChkDelete(pKey,today);				if(isS1==true) {					System.out.println("habitCalChkDelete媛믪궘�젣 �꽦怨�");					int chkCount =hcService.habitCalChkCount(pKey);										boolean isS2=hcService.updateChkCount(new HcDto(pKey,chkCount));										if(isS2==true) {						System.out.println("updateChkCount媛믪궘�젣 �꽦怨�");					}else {						System.out.println("updateChkCount媛믪궘�젣 �꽦怨�");					}									}else {					System.out.println("habitCalChkDelete媛믪궘�젣  �떎�뙣");				}			}		}         		if(switchCheck==null) {			switchCheck="N";		}else {			switchCheck="Y";		}         		boolean isS=hcService.updateCalWith(new HcDto(pKey,switchCheck));		if(isS){			return "redirect:main.do?id="+HcLoginDto.getId()+"&role="+HcLoginDto.getRole();		}else{			model.addAttribute("msg","�궘�젣�뿉 �떎�뙣 �뻽�뒿�땲�떎.");            return "error";		}         	}     		//V�샎�옄 �븯湲� �긽�꽭蹂닿린 �궘�젣	@RequestMapping(value = "/habitCalDeleteAlone.do", method = RequestMethod.GET)	public String habitCalDeleteAlone(String pKey, String id,String which, Locale locale, Model model) {		logger.info("habitCalDelete {}.", locale);      		boolean isS  = hcService.habitCalDelete(pKey,id);		HcLoginDto HcLoginDto=hcService.getUser(id);					if(isS==true){								if(which.equals("main")) {					return "redirect:main.do?id="+HcLoginDto.getId()+"&role="+HcLoginDto.getRole();						}else if(which.equals("boardListWith")) {					return "redirect:boardListWith.do";				}else if(which.equals("completeList")) {					return "redirect:habitCalCompleteList.do?id="+HcLoginDto.getId()+"&role="+HcLoginDto.getRole();								}else {					model.addAttribute("msg","�씠�룞�뿉 �떎�뙣�뻽�뒿�땲�떎.");					return "error";    				}							}else{				model.addAttribute("msg","�궘�젣�뿉 �떎�뙣 �뻽�뒿�땲�떎.");				return "error";            			}	}   				//V�븿猿� �븯湲� �긽�꽭蹂닿린 �궘�젣	@RequestMapping(value = "/habitCalDeleteWith.do", method = RequestMethod.GET)	public String habitCalDeleteWith(String pKey, String id,String which, Locale locale, Model model) {		logger.info("habitCalDeleteWith {}.", locale);		System.out.println("habitCalDeleteWith:pKey"+pKey+"habitCalDeleteWith:id"+id);		boolean isS  = hcService.habitCalDelete(pKey,id);		System.out.println("habitCalDeleteWith:isS"+isS);				HcLoginDto HcLoginDto=hcService.getUser(id);		//�씤利앺럹�씠吏� �떎 �궘�젣		boolean isS1  = hcService.deleteHcInChk(pKey,id);   		System.out.println("habitCalDeleteWith:isS1"+isS1);			if(isS==true&&isS1==true){								if(which.equals("main")) {					return "redirect:main.do?id="+HcLoginDto.getId()+"&role="+HcLoginDto.getRole();						}else if(which.equals("boardListWith")) {					return "redirect:boardListWith.do";				}else if(which.equals("completeList")) {					return "redirect:habitCalCompleteList.do?id="+HcLoginDto.getId()+"&role="+HcLoginDto.getRole();								}else {					model.addAttribute("msg","�씠�룞�뿉 �떎�뙣�뻽�뒿�땲�떎.");					return "error";    				}							}else{				model.addAttribute("msg","�궘�젣�뿉 �떎�뙣 �뻽�뒿�땲�떎.");				return "error";            			}	}     		//V�떖�젰 �궘�젣 諛� 痍⑥냼	@RequestMapping(value = "/habitCalDeleteWithAll.do", method = RequestMethod.GET)	public String habitCalDeleteWithAll(String pKey, String id,String which, Locale locale, Model model) {		logger.info("habitCalDeleteWithAll {}.", locale);      		boolean isS  = hcService.habitCalDeleteAll(pKey);		HcLoginDto HcLoginDto=hcService.getUser(id);		//�씤利앺럹�씠吏� �떎 �궘�젣		boolean isS1  = hcService.deleteHcInChkAll(pKey);   		System.out.println("habitCalDeleteAll:"+isS+"deleteHcInChkAll:"+isS1);			if(isS==true&&isS1==true){								if(which.equals("main")) {					return "redirect:main.do?id="+HcLoginDto.getId()+"&role="+HcLoginDto.getRole();						}else if(which.equals("boardListWith")) {					return "redirect:boardListWith.do";							}else {					model.addAttribute("msg","�씠�룞�뿉 �떎�뙣�뻽�뒿�땲�떎.");					return "error";    				}							}else{				model.addAttribute("msg","�궘�젣�뿉 �떎�뙣 �뻽�뒿�땲�떎.");				return "error";            			}	} 						//V�샎�옄 �븿猿� �꽑�깮selectform	@RequestMapping(value = "/selectform.do", method = RequestMethod.GET)	public String selectform(Model model,Locale locale,SessionStatus session) {	   logger.info("selectform{}", locale);	   return "selectform"; 	}     					@RequestMapping(value = "/noticeBoardList.do", method = RequestMethod.GET)	public String noticeBoardlist(Locale locale,Model model) {		   logger.info("noticeBoardList{}", locale);		   List<HcAnsDto> lists=hcService.noticeBoardList();		   model.addAttribute("lists",lists);		   return "noticeBoardList";     }   				@RequestMapping(value = "/noticeBoardDetail.do", method = RequestMethod.GET)	public String noticeBoardDetail(int seq,Locale locale,Model model) {		   logger.info("noticeBoardDetail{}", locale);		   		   boolean isS1=hcService.readCount(seq);	       System.out.println("replyBoardUpdate isS1:"+isS1);			   		   HcAnsDto HcAnsDto=hcService.noticeBoardGet(seq);		   model.addAttribute("HcAnsDto",HcAnsDto);		   return "noticeBoardDetail";     }   				@RequestMapping(value = "/noticeBoardInsertform.do", method = RequestMethod.GET)	public String noticeBoardInsertform(Locale locale) {		   logger.info("noticeBoardInsertform{}", locale);		   return "noticeBoardInsertform";     }   				@RequestMapping(value = "/noticeBoardInsert.do", method = RequestMethod.POST)	public String noticeBoardInsert(HcAnsDto HcAnsDto,Locale locale) {		   logger.info("noticeBoardInsert{}", locale);		   boolean isS=hcService.noticeBoardInsert(HcAnsDto);	       System.out.println("isS:"+isS);		   		   return "redirect:noticeBoardList.do";     }   			@RequestMapping(value = "/noticeBoardUpdate.do", method = RequestMethod.POST)	public String noticeBoardUpdate(HcAnsDto HcAnsDto, Locale locale) {		   logger.info("noticeBoardUpdate{}", locale);			   boolean isS=hcService.noticeBoardUpdate(HcAnsDto);	       System.out.println("isS:"+isS);		   		   return "redirect:noticeBoardDetail.do?seq="+HcAnsDto.getSeq();     }  			@RequestMapping(value = "/noticeBoardUpdateform.do", method = RequestMethod.GET)	public String noticeBoardUpdateform(String seq, Model model,Locale locale) {		   logger.info("noticeBoardUpdateform{}", locale);		   int seq1= Integer.parseInt(seq);		   HcAnsDto HcAnsDto=hcService.noticeBoardGet(seq1);		   model.addAttribute("HcAnsDto",HcAnsDto);		   return "noticeBoardUpdateform";     }  				@RequestMapping(value = "/noticeBoardDelete.do", method = RequestMethod.GET)	public String noticeBoardDelete(int seq, Locale locale) {		   logger.info("noticeBoardDelete{}", locale);		   boolean isS=hcService.noticeBoardDelete(seq);	       System.out.println("isS:"+isS);		   		   		   return "redirect:noticeBoardList.do";     }   		@RequestMapping(value = "/replyBoardInsert.do", method = RequestMethod.POST)	public String replyBoardInsert(HcAnsDto HcAnsDto,int seq, Locale locale) {		   logger.info("replyBoardInsert{}", locale);			   		   		   boolean isS1=hcService.replyBoardUpdate(seq);	       System.out.println("replyBoardUpdate isS1:"+isS1);		       		   boolean isS2=hcService.replyBoardInsert(HcAnsDto);	       System.out.println("replyBoardInsert isS1:"+isS2);		       		   return "redirect:noticeBoardList.do";     }  							//V�씤利� 媛�吏� insert	@RequestMapping(value = "/photoInChkInsert.do", method = RequestMethod.POST)	public String photoInChkInsert(HcInChkDto HcInChkDto, Locale locale, Model model) throws Exception{		logger.info("photoInChkInsert {}.", locale);		SimpleDateFormat SimpleDateFormat = new SimpleDateFormat("yyyyMMdd");		Date currentTime = new Date ();		String today = SimpleDateFormat.format(currentTime);		String inTime   = new java.text.SimpleDateFormat("HHmmss").format(new java.util.Date());        String HH=inTime.substring(0,2)+"시";        String mm=inTime.substring(2,4)+"분";        String tt=inTime.substring(4,6)+"초";        HcInChkDto.setInChkTime(HH+mm+tt);        HcInChkDto.setInChkDate(today+"");                MultipartFile f = HcInChkDto.getFile();        if(!f.isEmpty()) {//�뙆�씪 �뾽濡쒕뱶媛� �릱�떎硫�      	  String orgname=f.getOriginalFilename();      	  String newname=HcInChkDto.getId()+today+orgname;      	  String path=servletContext.getRealPath("/resources");      	  File file=new File(path+File.separator+newname);      	  HcInChkDto.setInChkPhoto(orgname);      	  HcInChkDto.setInChkPhoto2(newname);      	  f.transferTo(file);        }                System.out.println("HcInChkDto:"+HcInChkDto);        boolean isS=hcService.updateHcInChk(HcInChkDto);        if(isS==true) {      	          	int beforeCount = 0;        	List<HcInChkDto> beforeList =hcService.getHcInChk(new HcInChkDto(HcInChkDto.getpKey(), today));        	System.out.println("beforeList" + beforeList + "size()" + beforeList.size());        	for (int i = 0; i < beforeList.size(); i++) {                		        		if (beforeList.get(i).getInChkPhoto()==null) {        			System.out.println("�꼸�씠�떎.");        		}else {        			beforeCount++;					        		}        	}                        	        	if((beforeCount/(double)beforeList.size()) > 0.5) {        		hcService.habitCalInsertChk(HcInChkDto.getpKey(), today);        		        		int chkCount=hcService.habitCalChkCount(HcInChkDto.getpKey());        		hcService.updateChkCount(new HcDto(HcInChkDto.getpKey(), chkCount));        	}else {        	}      	              System.out.println("�엯�젰 �꽦怨�");            return "redirect:photoInChkCrud.do?id="+HcInChkDto.getId()+"&pKey="+HcInChkDto.getpKey()+"&crud=content"+"&inChkDate="+HcInChkDto.getInChkDate();         }else {            System.out.println("�엯�젰 �떎�뙣");            model.addAttribute("msg","媛� �엯�젰�뿉 �떎�뙣�뻽�뒿�땲�떎.");            return "error";               }                       }    //V�궗吏� �씤利� �뾽�뜲�씠�듃    @RequestMapping(value = "/photoInChkUpdate.do", method = RequestMethod.POST)    public String photoInChkUpdate(HcInChkDto HcInChkDto, Locale locale, Model model) throws Exception{  	          SimpleDateFormat SimpleDateFormat = new SimpleDateFormat("yyyyMMdd");        Date currentTime = new Date ();        String today = SimpleDateFormat.format(currentTime);        String inTime   = new java.text.SimpleDateFormat("HHmmss").format(new java.util.Date());        String HH=inTime.substring(0,2)+"시";        String mm=inTime.substring(2,4)+"분";        String tt=inTime.substring(4,6)+"초";        HcInChkDto.setInChkTime(HH+mm+tt);  	  	HcInChkDto.setInChkDate(today);        MultipartFile f = HcInChkDto.getFile();        System.out.println("file f : " + f);                if(!f.isEmpty()) {//�뙆�씪 �뾽濡쒕뱶媛� �릱�떎硫�      	  String orgname=f.getOriginalFilename();      	  String newname=HcInChkDto.getId()+today+orgname;      	  String path=servletContext.getRealPath("/resources");      	  System.out.println("path:"+path);                	  File file=new File(path+File.separator+newname);      	  HcInChkDto.setInChkPhoto(orgname);      	  HcInChkDto.setInChkPhoto2(newname);      	  f.transferTo(file);      	  System.out.println(HcInChkDto);        }                if(HcInChkDto.getInChkPhoto()==null||HcInChkDto.getInChkPhoto2()==null) {        	        	HcInChkDto HcInChkDto1 = hcService.getHcUserInChk(new HcInChkDto(HcInChkDto.getpKey(),HcInChkDto.getInChkDate() ,HcInChkDto.getId()));        	System.out.println("delete HcInChkDto1 : "+ HcInChkDto1);        	HcInChkDto.setInChkPhoto(HcInChkDto1.getInChkPhoto());        	HcInChkDto.setInChkPhoto2(HcInChkDto1.getInChkPhoto2());                	        }                boolean isS=hcService.updateHcInChk(HcInChkDto);        if(isS==true) {      	  System.out.println("�뾽�뜲�씠�듃 �꽦怨�");            return "redirect:photoInChkCrud.do?id="+HcInChkDto.getId()+"&pKey="+HcInChkDto.getpKey()+"&crud=content"+"&inChkDate="+HcInChkDto.getInChkDate();        }else {      	  System.out.println("�뾽�뜲�씠�듃 �떎�뙣");      	  model.addAttribute("msg","�뾽�뜲�씠�듃�뿉 �떎�뙣�뻽�뒿�땲�떎.");      	  return "error";                   }              }    		//V�씤利앹궗吏� �궘�젣    @RequestMapping(value = "/photoInChkDelete.do", method = RequestMethod.GET)    public String photoInChkDelete(String id, String pKey, Locale locale,  Model model){		logger.info("photoInChkDelete {}.", locale);  	          boolean isS=hcService.deleteHcUserInChk(new HcInChkDto(pKey,today ,id));        if(isS==true) {      	          	int beforeCount = 0;        	List<HcInChkDto> beforeList =hcService.getHcInChk(new HcInChkDto(pKey, today));        	for (int i = 0; i < beforeList.size(); i++) {        		if (beforeList.get(i).getInChkPhoto2()==null) {        			        		}else {        			beforeCount++;					        		}        	}                        	        	if((beforeCount/(double)beforeList.size()) <= 0.5) {        		boolean isS2=hcService.habitCalChkDelete(pKey, today);        		int chkCount=hcService.habitCalChkCount(pKey);        		hcService.updateChkCount(new HcDto(pKey, chkCount));        		        	}else {        	}      	              System.out.println("�궘�젣 �꽦怨�");            return "redirect:habitCalDetail.do?id="+id+"&pKey="+pKey+"&withh=Y";         }else {            System.out.println("�궘�젣 �떎�뙣");            model.addAttribute("msg","媛� �엯�젰�뿉 �떎�뙣�뻽�뒿�땲�떎.");            return "error";               }                       }    				//V紐⑤뱺 �쉶�썝�뱾�쓽 '�샎�옄' �븯湲� 由ъ뒪�듃 蹂닿린	@RequestMapping(value = "/boardList.do", method = RequestMethod.GET)	public ModelAndView boardlist(Locale locale, HcCriteria cri, String select1,String withh,String input2) {		logger.info("�샎�옄�븯湲� 紐⑸줉 {}."+cri.toString(), locale);		ModelAndView view = new ModelAndView();				System.out.println("select1:"+select1);		System.out.println("input2:"+input2);			System.out.println("withh"+withh);					int count = hcService.listCriteriaCount(select1,input2, withh);		      	List<HcDto> list2=hcService.listCriteria(cri,select1,input2,withh);      	      	 for (int i = 0; i < list2.size(); i++) {     		System.out.println(list2.get(i));     	 } 		 		HcPageMaker pageMaker = new HcPageMaker(); 		pageMaker.setCri(cri); 		pageMaker.setTotalCount(count); 		if(input2==null) { 			input2=""; 		} 		if(select1==null) { 			select1="ID"; 		} 		 		System.out.println(pageMaker);     	 view.addObject("pageMaker", pageMaker);      	       	 view.addObject("list2",list2);      	 view.addObject("select1",select1);      	 view.addObject("input2",input2);        	 view.addObject("cri",cri);        	 view.addObject("withh",withh);      	       	 view.setViewName("boardList");       return view;    }   		    						//V紐⑤뱺 �쉶�썝�뱾�쓽 '�븿猿�' �븯湲� 由ъ뒪�듃 蹂닿린    @RequestMapping(value = "/boardListWith.do", method = RequestMethod.GET)    public ModelAndView boardlistWith(Locale locale) {       logger.info("�븿猿섑븯湲� 紐⑸줉 {}.", locale);       ModelAndView view = new ModelAndView();              List<HcDto> list1=hcService.getAllHcListWith();       view.addObject("list1",list1);       view.setViewName("boardListWith");       return view;    } 	                                                 	    //V紐⑤뱺 �쉶�썝�뱾�쓽 '�샎�옄' �븯湲� 由ъ뒪�듃 �긽�꽭 蹂닿린留� �븯湲� �떎瑜� �궗�슜�옄�슜	@RequestMapping(value = "/habitCalAloneDetailView.do", method = RequestMethod.GET)	public ModelAndView habitCalAloneDetailView(String id, String pKey, Locale locale) throws ParseException {		logger.info("habitCalAloneDetailView {}.", locale);		ModelAndView view = new ModelAndView();				HcDto dto = hcService.getHabitCalListOne(pKey,id);        		Map<String, Integer> map =Util.DetailYYMMDD(dto);        		List<String> chkList=hcService.habitCalTakeChk(pKey);		        view.addObject("chkList",chkList);        view.addObject("dto",dto);           view.addObject("map",map);        view.addObject("id",id);         view.setViewName("habitCalAloneDetailView");        	         return view;                 	 	}   		//V�븿猿섑븯湲� �떖�젰 蹂닿린留� �븯湲�	@RequestMapping(value = "/habitCalWithDetailView.do", method = RequestMethod.GET)	public ModelAndView habitCalWithDetailView(String id, String pKey, Locale locale) throws ParseException {		logger.info("habitCalWithDetailView {}.", locale);		ModelAndView view = new ModelAndView();				HcDto dto = hcService.getHabitCalListOne(pKey,id);        		long diffdays=Util.doDiffOfDate(dto.getStDate());        		int stDate=Integer.parseInt(dto.getStDate());		int edDate=Integer.parseInt(dto.getEdDate());				if(today1>=stDate&&today1<=edDate) {		//�떆�옉�씪 =< �삤�뒛�궇吏�  =< 醫낅즺�씪 && �븿猿섑븯湲� �긽�깭�씤 寃쎌슦 	  				Map<String, Integer> map= Util.TodayYYMMDD();				//�씤利앺븯湲� �빐�떦 �궇吏쒖뿉 �빐�떦 紐⑸줉				List<HcInChkDto> list = hcService.getHcInChk(new HcInChkDto(pKey, today1+""));				view.addObject("list",list);				view.addObject("diffdays",diffdays+1);				view.addObject("map",map);				view.addObject("dto",dto);				view.setViewName("photoInChkView");			return view;					}else{			Map<String, Integer> map =Util.DetailYYMMDD(dto);			List<HcDto> list = hcService.getHabitCalList(pKey);			int intoPer=hcService.habitCalIntoPerCount(pKey);			List<String> chkList=hcService.habitCalTakeChk(pKey);						if(today1<stDate) {				view.addObject("diffdays",-diffdays);			}else {						view.addObject("diffdays",dto.getTerm());			}	        									view.addObject("dto",dto);   	        view.addObject("map",map);	        view.addObject("intoPer",intoPer);	        view.addObject("chkList",chkList);	        view.addObject("list",list);//李멸��옄�뱾                        view.setViewName("habitCalWithDetailView");            	             return view;        		}	}		//V�꽌�빟�럹�씠吏�濡� �씠�룞    @RequestMapping(value = "/promise.do", method = RequestMethod.GET)    public String promise(String id, String hostId, String pKey, Locale locale, Model model) {    	logger.info("promise {}.", locale);    	Map<String, String> map = new HashMap<String, String>();    	map.put("id", id);    	map.put("pKey", pKey);    	map.put("hostId", hostId);    	model.addAttribute("map", map);    	return "promise";    }		    //V�꽌�빟�븯硫� �빐�떦 �뒿愿��떖�젰�쓽 �궇吏� 留뚰겮 �씤利앺럹�씠吏� 留뚮뱾�뼱吏�    @RequestMapping(value = "/promiseCheck.do", method = RequestMethod.POST)    public String promiseCheck(String id, String pKey, String hostId, String promise, Locale locale, Model model) {		logger.info("promiseCheck {}.", locale);           	if(promise.equals("on")) {      	     		HcDto HcDto = hcService.getHabitCalListOne(pKey,hostId);    		System.out.println("HcDto promiseCheck:"+HcDto);    		int intoper=hcService.habitCalIntoPerCount(pKey);	       	if(intoper>=HcDto.getRecruit()) {	       		model.addAttribute("msg","�씤�썝�씠 苑됱갸�뒿�땲�떎.");	       		return "error";	       	}else {	          	HcDto.setId(id);	          	HcDto.setHost("N");	          	System.out.println("�솗�씤�솗�씤:" + HcDto);	          	//李멸��옄 �븘�씠�뵒  hcboard 留뚮뱾湲�	           	System.out.println("HcDto promiseCheck2:"+HcDto);	          	boolean isS=hcService.habitCalInsert(HcDto);		          	Map<String, Integer> map=Util.DetailYYMMDD(HcDto);	          		          	cal.set(map.get("stYear"), map.get("stMonth")-1, map.get("stDate"));		          	//李멸��옄 �씤利� 留뚮뱾湲�	          	for (int i = 0; i < map.get("term"); i++) {		          		cal.add(Calendar.DATE, i);	              	String inChkDate =SimpleDateFormat.format(cal.getTime());	              	boolean isS1 = hcService.insertHcInChk(new HcInChkDto(pKey, id, HcDto.getTitle(), inChkDate));	                 	              	if(isS1) {	              		System.out.println("insertHcInChk term"+i+"�뿉�엯 �젰�꽦怨�");	              	}else {	              		model.addAttribute("msg","�떎�뙣 �뻽�뒿�땲�떎.!");	              		return "error";	              	}	          	}               		             	          	if(isS==true) {	          		System.out.println("媛� �엯�젰 �꽦怨�");	                return "redirect:habitCalDetail.do?id="+id+"&pKey="+pKey+"&withh=Y";		          	}else {	                System.out.println("媛� �엯�젰 �떎�뙣");	                model.addAttribute("msg","媛� �엯�젰�뿉 �떎�뙣�뻽�뒿�땲�떎.2");	                return "error";      	          	}             	       	}                             }else {          model.addAttribute("msg","�꽌�빟�뿉 �떎�뙣 �뻽�뒿�땲�떎.");          return "error";       }	}            	//V�븿猿섑븯湲� �빐�떦�씪 �궡�슜 �긽�꽭 蹂닿린 �닔�젙�븯湲� �엯�젰�븯湲�	@RequestMapping(value = "/photoInChkCrud.do", method = RequestMethod.GET)		public ModelAndView photoInChkCrud(String inChkDate,String crud, String id, String pKey, Locale locale, Model model) throws ParseException {		logger.info("photoInChkCrud {}.", locale);		ModelAndView view = new ModelAndView();				HcDto dto = hcService.getHabitCalListOne(pKey,id);	    System.out.println("dto:"+dto);			long diffdays=Util.doDiffOfDate2(dto.getStDate(),inChkDate)+1;				Map<String, Integer> map =Util.TodayYYMMDD();		HcInChkDto HcInChkDto = hcService.getHcUserInChk(new HcInChkDto(pKey,inChkDate ,id));					view.addObject("diffdays",diffdays);		view.addObject("dto",dto);   		view.addObject("map",map);		view.addObject("HcInChkDto",HcInChkDto);    				if(crud.equals("content")) {			view.setViewName("photoInChkContent");		}else if(crud.equals("update")) {			view.setViewName("photoInChkUpdate");		}else {			view.setViewName("photoInChkInsert");		}			return view;			}   	//V�븿猿섑븯湲� 吏꾪뻾以� �쟾泥� �떖�젰蹂닿린	@RequestMapping(value = "/habitCalWithDetailView2.do", method = RequestMethod.GET)	public ModelAndView habitCalWithDetailView2(String id, String pKey, Locale locale) throws ParseException {		logger.info("habitCalWithDetailView2 {}.", locale);		ModelAndView view = new ModelAndView();				HcDto dto = hcService.getHabitCalListOne(pKey,id);        		long diffdays=Util.doDiffOfDate(dto.getStDate())+1;		//�떆�옉�씪 =< �삤�뒛�궇吏�  =< 醫낅즺�씪 && �븿猿섑븯湲� �긽�깭�씤 寃쎌슦    		Map<String, Integer> map =Util.DetailYYMMDD(dto);    		List<HcDto> list = hcService.getHabitCalList(pKey);    		int intoPer=hcService.habitCalIntoPerCount(pKey);    		List<String> chkList=hcService.habitCalTakeChk(pKey);    		view.addObject("diffdays",diffdays);            view.addObject("dto",dto);               view.addObject("map",map);            view.addObject("intoPer",intoPer);            view.addObject("chkList",chkList);            view.addObject("list",list);//李멸��옄�뱾                        view.setViewName("habitCalWithDetailView2");            	             return view;	}		    	//V紐⑤뱺 �쉶�썝�뱾�쓽 '�븿猿�' �븯湲� 由ъ뒪�듃 �긽�꽭蹂닿린 濡쒓렇�씤 �궗�슜�옄 蹂닿린 �닔�젙遺덇�	@RequestMapping(value = "/photoInChkView.do", method = RequestMethod.GET)	public ModelAndView photoInChkView(String thisDate,String id, String pKey, Locale locale) throws ParseException {		logger.info("photoInChkView {}.", locale);		ModelAndView view = new ModelAndView();		System.out.println("thisDate:"+thisDate);		HcDto dto = hcService.getHabitCalListOne(pKey,id);        System.out.println("dto.getStDate():"+dto.getStDate());		long diffdays=Util.doDiffOfDate2(dto.getStDate(),thisDate)+1;        	System.out.println("diffdays:"+diffdays);        	  			Map<String, Integer> map= Util.TodayYYMMDD2(thisDate);			//�씤利앺븯湲� �빐�떦 �궇吏쒖뿉 �빐�떦 紐⑸줉			List<HcInChkDto> list = hcService.getHcInChk(new HcInChkDto(pKey, thisDate));			view.addObject("list",list);			view.addObject("diffdays",diffdays);			view.addObject("map",map);			view.addObject("dto",dto);			view.setViewName("photoInChkView");        	 			return view;	}	        	//V�쁽�옱 吏꾪뻾以묒씤 由ъ뒪�듃 �룊洹� 媛곴컖 �띁�꽱�듃 援ы븯湲�	@RequestMapping(value = "/totalPer.do", method = RequestMethod.GET)	public ModelAndView totalPer(String id, Locale locale, Model model) {		logger.info("�쟾泥� 吏꾪뻾 �띁�꽱�듃 {}.", locale);		HcLoginDto HcLoginDto= hcService.getUser(id);		ModelAndView view = new ModelAndView();				List<HcDto> list1=hcService.getAllList(id);		double count=0;		double sum=0;                  		for (int m = 0; m < list1.size(); m++) {			int term = Integer.parseInt(list1.get(m).getTerm());						int chkCount = hcService.habitCalChkCount(list1.get(m).getpKey());						count +=(chkCount/(double)term)*100;		}            		//�쁽�옱 吏꾪뻾以묒씤 由ъ뒪�듃�쓽 �룊洹쟳um 援ы븯湲�		if(list1.size()==0||count==0) {			sum=0.0;		}else {			sum=count/list1.size();               		}				view.addObject("sum",sum);		        view.addObject("list1",list1);        view.addObject("HcLoginDto",HcLoginDto);        view.setViewName("progress");        return view;					   }    		//V�옲�궧蹂닿린    @RequestMapping(value = "/boardlistWithRanking.do", method = RequestMethod.GET)    public ModelAndView boardlistWithRanking(Locale locale, Model model) {    	logger.info("boardlistWithRanking {}.", locale);    	ModelAndView view = new ModelAndView();           	List<HcDto> list=hcService.boardlistWithRanking();    	System.out.println("list:"+list);    	System.out.println("listsize:"+list.size());    	System.out.println("today.substring(0, 6):"+today.substring(0, 6));      	      	 for (int i = 0; i < list.size(); i++) {      		if(i<=2){      			      		}else {      			list.remove(i);      		}		}      	       	 view.addObject("list",list);      	 view.setViewName("boardlistWithRanking");       return view;    } 					//V�쑀���젙蹂�	@RequestMapping(value = "/userinfo.do", method = RequestMethod.GET)	public String userinfo(String id, Locale locale, Model model) {		logger.info("�쑀���젙蹂� {}.", locale);		HcLoginDto HcLoginDto= hcService.getUser(id);		model.addAttribute("HcLoginDto", HcLoginDto);		return "userinfo";	}            	//V�쑀�� �뾽�뜲�씠�듃	@RequestMapping(value = "/updateform.do", method = RequestMethod.GET)	public String updateform(String id, Locale locale, Model model) {      logger.info("�쑀�� �뾽�뜲�씠�듃 {}.", locale);      HcLoginDto HcLoginDto= hcService.getUser(id);      model.addAttribute("HcLoginDto", HcLoginDto);      return "updateform";	}            	//V�쑀���뾽�뜲�씠�듃 �썑	@RequestMapping(value = "/updateform_after.do", method = RequestMethod.POST)	public String updateform_after(HcLoginDto HcLoginDto, Locale locale) {		logger.info("�쑀���뾽�뜲�씠�듃 �썑 {}.", locale);		String id=HcLoginDto.getId();      		boolean isS= hcService.updateUser(HcLoginDto);      		if(isS){			return "redirect:userinfo.do?id="+id;		}else{			return "redirect:updateform.do?id="+id;		}	}               			//V�깉�눜�븯湲�	@RequestMapping(value = "/deluser.do", method = RequestMethod.GET)	public String deluser(String id, Model model,Locale locale) {		logger.info("�깉�눜�븯湲� {}.", locale);				model.addAttribute("loginId", "0");		model.addAttribute("loginRole", "0");				boolean isS1= hcService.deleUser(id);		boolean isS2= hcService.deleList(id);				System.out.println("isS1" + isS1 + "isS2" + isS2);		if(isS1==true){			System.out.println("�깉�눜�꽦怨�");			return "redirect:index.jsp";		}else{			System.out.println("�깉�눜�떎�뙣");			return "redirect:userinfo.do?id="+id;		}	}         	      	//V醫낅즺�씪�씠 吏��궃 紐⑤뱺 由ъ뒪�듃�뱾 媛����삤湲�	@RequestMapping(value = "/habitCalCompleteList.do", method = RequestMethod.GET)	public ModelAndView habitCalCompleteList(String id, Locale locale) {		logger.info("�셿猷� 由ъ뒪�듃 紐⑸줉 {}.", locale);		ModelAndView view = new ModelAndView();          		List<HcDto> list1=hcService.getAllListEndY(id);          		view.addObject("list1",list1);		view.setViewName("habitCalCompleteList");		return view;	} 			//V�샎�옄 �븯湲� �긽�꽭蹂닿린 �궘�젣	@RequestMapping(value = "/habitCalDeleteEndList.do", method = RequestMethod.GET)	public String habitCalDeleteEndList(String pKey, String id,String which, Locale locale, Model model) {		logger.info("habitCalDelete {}.", locale);      		boolean isS  = hcService.habitCalDelete(pKey,id);		HcLoginDto HcLoginDto=hcService.getUser(id);					if(isS==true){								if(which.equals("main")) {					return "redirect:main.do?id="+HcLoginDto.getId()+"&role="+HcLoginDto.getRole();						}else if(which.equals("boardListWith")) {					return "redirect:boardListWith.do";				}else if(which.equals("completeList")) {					return "redirect:habitCalCompleteList.do?id="+HcLoginDto.getId();								}else {					model.addAttribute("msg","�씠�룞�뿉 �떎�뙣�뻽�뒿�땲�떎.");					return "error";    				}							}else{				model.addAttribute("msg","�궘�젣�뿉 �떎�뙣 �뻽�뒿�땲�떎.");				return "error";            			}	}				}